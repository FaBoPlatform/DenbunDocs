{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Denbun Docs Denbun Docs\u306b\u3064\u3044\u3066 Denbun Docs\u306f\u3001FaBo Denbun\u306e\u5b66\u7fd2\u7528\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u3059\u3002 \u4fee\u6b63\u4f9d\u983c\u7b49 Github\u306eRepo\u306b Issues \u3092\u3042\u3052\u308b\u3002","title":"Denbun Docs"},{"location":"#denbun-docs","text":"","title":"Denbun Docs"},{"location":"#denbun-docs_1","text":"Denbun Docs\u306f\u3001FaBo Denbun\u306e\u5b66\u7fd2\u7528\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u3059\u3002","title":"Denbun Docs\u306b\u3064\u3044\u3066"},{"location":"#_1","text":"Github\u306eRepo\u306b Issues \u3092\u3042\u3052\u308b\u3002","title":"\u4fee\u6b63\u4f9d\u983c\u7b49"},{"location":"1.dev/","text":"\u958b\u767a\u74b0\u5883 FaBo Denbun\u306e\u958b\u767a\u74b0\u5883\u306f\u3001Arduino\u3092\u4f7f\u7528\u3057\u307e\u3059(Arduino 1.8\u4ee5\u964d)\u3002 Arduino IDE\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb https://www.arduino.cc/en/Main/Software \u3088\u308aArduino IDE\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u3001\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 ESP32\u7528\u958b\u767a\u74b0\u5883\u306e\u69cb\u7bc9 Arduino IDE\u306e\u30e1\u30cb\u30e5\u30fc\u304b\u3089\u3001 Arduino + Preferences... \u3092\u9078\u629e\u3057\u307e\u3059\u3002 \u8ffd\u52a0\u306e\u30dc\u30fc\u30c9\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u306eURL\u306b\u3001https://dl.espressif.com/dl/package_esp32_index.json \u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002 \u9805\u76ee \u5185\u5bb9 \u8ffd\u52a0\u306e\u30dc\u30fc\u30c9\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u306eURL https://dl.espressif.com/dl/package_esp32_index.json Arduino IDE\u306e\u30e1\u30cb\u30e5\u30fc\u304b\u3089\u3001 \u30c4\u30fc\u30eb + \u30dc\u30fc\u30c9: Arduino/Genuino Uno + \u30dc\u30fc\u30c9\u30de\u30cd\u30fc\u30b8\u30e3\u30fc... \u3092\u9078\u629e\u3057\u307e\u3059\u3002 esp32\u306e\u30ad\u30fc\u30ef\u30fc\u30c9\u3067\u691c\u7d22\u3057\u3067\u3066\u304f\u308b\u3001 esp32 by Espressif Systems \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 Sample LED Brick\u3092IO4\u306b\u63a5\u7d9a\u3057\u307e\u3059\u3002 \u4e0b\u8a18\u30b3\u30fc\u30c9\u3092Arduino IDE\u306b\u8a18\u8ff0\u3057\u307e\u3059\u3002 1 2 3 4 5 6 7 8 9 10 void setup () { pinMode ( 4 , OUTPUT ); } void loop () { digitalWrite ( 4 , HIGH ); delay ( 1000 ); digitalWrite ( 4 , LOW ); delay ( 1000 ); } Build\u3068\u8ee2\u9001 Arduino IDE\u306e\u77e2\u5370\u3092\u9078\u629e\u3057\u3001Build\u3057\u8ee2\u9001\u3057\u307e\u3059\u3002","title":"\u958b\u767a\u74b0\u5883"},{"location":"1.dev/#_1","text":"FaBo Denbun\u306e\u958b\u767a\u74b0\u5883\u306f\u3001Arduino\u3092\u4f7f\u7528\u3057\u307e\u3059(Arduino 1.8\u4ee5\u964d)\u3002","title":"\u958b\u767a\u74b0\u5883"},{"location":"1.dev/#arduino-ide","text":"https://www.arduino.cc/en/Main/Software \u3088\u308aArduino IDE\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u3001\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002","title":"Arduino IDE\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb"},{"location":"1.dev/#esp32","text":"Arduino IDE\u306e\u30e1\u30cb\u30e5\u30fc\u304b\u3089\u3001 Arduino + Preferences... \u3092\u9078\u629e\u3057\u307e\u3059\u3002 \u8ffd\u52a0\u306e\u30dc\u30fc\u30c9\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u306eURL\u306b\u3001https://dl.espressif.com/dl/package_esp32_index.json \u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002 \u9805\u76ee \u5185\u5bb9 \u8ffd\u52a0\u306e\u30dc\u30fc\u30c9\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u306eURL https://dl.espressif.com/dl/package_esp32_index.json Arduino IDE\u306e\u30e1\u30cb\u30e5\u30fc\u304b\u3089\u3001 \u30c4\u30fc\u30eb + \u30dc\u30fc\u30c9: Arduino/Genuino Uno + \u30dc\u30fc\u30c9\u30de\u30cd\u30fc\u30b8\u30e3\u30fc... \u3092\u9078\u629e\u3057\u307e\u3059\u3002 esp32\u306e\u30ad\u30fc\u30ef\u30fc\u30c9\u3067\u691c\u7d22\u3057\u3067\u3066\u304f\u308b\u3001 esp32 by Espressif Systems \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002","title":"ESP32\u7528\u958b\u767a\u74b0\u5883\u306e\u69cb\u7bc9"},{"location":"1.dev/#sample","text":"LED Brick\u3092IO4\u306b\u63a5\u7d9a\u3057\u307e\u3059\u3002 \u4e0b\u8a18\u30b3\u30fc\u30c9\u3092Arduino IDE\u306b\u8a18\u8ff0\u3057\u307e\u3059\u3002 1 2 3 4 5 6 7 8 9 10 void setup () { pinMode ( 4 , OUTPUT ); } void loop () { digitalWrite ( 4 , HIGH ); delay ( 1000 ); digitalWrite ( 4 , LOW ); delay ( 1000 ); }","title":"Sample"},{"location":"1.dev/#build","text":"Arduino IDE\u306e\u77e2\u5370\u3092\u9078\u629e\u3057\u3001Build\u3057\u8ee2\u9001\u3057\u307e\u3059\u3002","title":"Build\u3068\u8ee2\u9001"},{"location":"2.web/","text":"Web\u30b5\u30fc\u30d0 FaBo Denbun\u306e\u958b\u767a\u74b0\u5883\u306f\u3001Denbun\u3092Web\u30b5\u30fc\u30d0\u5316\u3057\u3066\u304a\u3053\u306a\u3044\u307e\u3059\u3002 AccessPoint\u3068Web\u30b5\u30fc\u30d0\u306e\u7acb\u3061\u4e0a\u3052 \u9805\u76ee \u5185\u5bb9 ssid ESP32AP-\u81ea\u5206\u306e\u540d\u524d pass \u4efb\u610f\u306e\u5024 ip 192.168.0.1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 #include <WiFi.h> const char ssid [] = \"ESP32AP-AKIRA\" ; const char pass [] = \"11111111\" ; const IPAddress ip ( 192 , 168 , 0 , 1 ); const IPAddress subnet ( 255 , 255 , 255 , 0 ); WiFiServer server ( 80 ); int count = 0 ; void setup () { Serial . begin ( 115200 ); WiFi . softAP ( ssid , pass ); delay ( 100 ); WiFi . softAPConfig ( ip , ip , subnet ); IPAddress serverIP = WiFi . softAPIP (); server . begin (); Serial . println (); Serial . print ( \"AccessPoint:\" ); Serial . println ( ssid ); Serial . print ( \"IP:\" ); Serial . println ( serverIP ); } void loop () { WiFiClient client = server . available (); if ( ! client ) { return ; } Serial . println ( \"new request\" ); while ( ! client . available ()){ delay ( 1 ); } String res = \"\" ; while ( client . available ()) { char c = client . read (); res += c ; } Serial . println ( res ); client . print ( \"HTTP/1.1 200 OK \\r\\n \" ); client . print ( \"Content-Type: text/html; charset=utf-8; \\r\\n \" ); client . print ( \" \\r\\n \" ); count ++ ; client . println ( count ); } AccessPoint\u3078\u306e\u63a5\u7d9a\u3092\u304a\u3053\u306a\u3044\u307e\u3059\u3002 \u30d6\u30e9\u30a6\u30b6\u304b\u3089\u306e\u63a5\u7d9a","title":"Web\u30b5\u30fc\u30d0"},{"location":"2.web/#web","text":"FaBo Denbun\u306e\u958b\u767a\u74b0\u5883\u306f\u3001Denbun\u3092Web\u30b5\u30fc\u30d0\u5316\u3057\u3066\u304a\u3053\u306a\u3044\u307e\u3059\u3002","title":"Web\u30b5\u30fc\u30d0"},{"location":"2.web/#accesspointweb","text":"\u9805\u76ee \u5185\u5bb9 ssid ESP32AP-\u81ea\u5206\u306e\u540d\u524d pass \u4efb\u610f\u306e\u5024 ip 192.168.0.1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 #include <WiFi.h> const char ssid [] = \"ESP32AP-AKIRA\" ; const char pass [] = \"11111111\" ; const IPAddress ip ( 192 , 168 , 0 , 1 ); const IPAddress subnet ( 255 , 255 , 255 , 0 ); WiFiServer server ( 80 ); int count = 0 ; void setup () { Serial . begin ( 115200 ); WiFi . softAP ( ssid , pass ); delay ( 100 ); WiFi . softAPConfig ( ip , ip , subnet ); IPAddress serverIP = WiFi . softAPIP (); server . begin (); Serial . println (); Serial . print ( \"AccessPoint:\" ); Serial . println ( ssid ); Serial . print ( \"IP:\" ); Serial . println ( serverIP ); } void loop () { WiFiClient client = server . available (); if ( ! client ) { return ; } Serial . println ( \"new request\" ); while ( ! client . available ()){ delay ( 1 ); } String res = \"\" ; while ( client . available ()) { char c = client . read (); res += c ; } Serial . println ( res ); client . print ( \"HTTP/1.1 200 OK \\r\\n \" ); client . print ( \"Content-Type: text/html; charset=utf-8; \\r\\n \" ); client . print ( \" \\r\\n \" ); count ++ ; client . println ( count ); } AccessPoint\u3078\u306e\u63a5\u7d9a\u3092\u304a\u3053\u306a\u3044\u307e\u3059\u3002","title":"AccessPoint\u3068Web\u30b5\u30fc\u30d0\u306e\u7acb\u3061\u4e0a\u3052"},{"location":"2.web/#_1","text":"","title":"\u30d6\u30e9\u30a6\u30b6\u304b\u3089\u306e\u63a5\u7d9a"},{"location":"3.led/","text":"LED\u306e\u70b9\u706f/\u6d88\u706f LED\u306e\u70b9\u706f/\u6d88\u706f 1 2 3 4 5 6 7 8 9 10 void setup () { pinMode ( 4 , OUTPUT ); } void loop () { digitalWrite ( 4 , HIGH ); delay ( 1000 ); digitalWrite ( 4 , LOW ); delay ( 1000 ); } LED\u3092Web\u304b\u3089\u64cd\u4f5c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 #include <WiFi.h> #include <WiFiClient.h> #include <WebServer.h> const char ssid [] = \"ESP32AP-AKIRA\" ; const char pass [] = \"11111111\" ; const IPAddress ip ( 192 , 168 , 0 , 1 ); const IPAddress subnet ( 255 , 255 , 255 , 0 ); WebServer server ( 80 ); const char page [] PROGMEM = R \"=====( <! DOCTYPE html > < html > < head > < meta name = \"viewport\" content = \"width=device-width,initial-scale=1\" > </ head > < body > < center > LED < br > < a href = \"/on\" > ON </ a >< br > < a href = \"/off\" > OFF </ a >< br > </ center > </ body > </ html > ) ===== \"; void handleRoot () { server . send ( 200 , \"text/html\" , page ); } void handleOn (){ digitalWrite ( 4 , HIGH ); Serial . println ( \"LED ON\" ); server . send ( 200 , \"text/html\" , page ); } void handleOff (){ digitalWrite ( 4 , LOW ); Serial . println ( \"LED OFF\" ); server . send ( 200 , \"text/html\" , page ); } void setup () { Serial . begin ( 115200 ); WiFi . softAP ( ssid , pass ); delay ( 100 ); WiFi . softAPConfig ( ip , ip , subnet ); IPAddress serverIP = WiFi . softAPIP (); server . on ( \"/\" , handleRoot ); server . on ( \"/on\" , handleOn ); server . on ( \"/off\" , handleOff ); server . begin (); pinMode ( 4 , OUTPUT ); Serial . println (); Serial . print ( \"AccessPoint:\" ); Serial . println ( ssid ); Serial . print ( \"IP:\" ); Serial . println ( serverIP ); } void loop () { server . handleClient (); } \u9805\u76ee \u5024 http://192.168.0.1/on LED on http://192.168.0.1/off LED off","title":"LED\u306e\u70b9\u706f/\u6d88\u706f"},{"location":"3.led/#led","text":"","title":"LED\u306e\u70b9\u706f/\u6d88\u706f"},{"location":"3.led/#led_1","text":"1 2 3 4 5 6 7 8 9 10 void setup () { pinMode ( 4 , OUTPUT ); } void loop () { digitalWrite ( 4 , HIGH ); delay ( 1000 ); digitalWrite ( 4 , LOW ); delay ( 1000 ); }","title":"LED\u306e\u70b9\u706f/\u6d88\u706f"},{"location":"3.led/#ledweb","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 #include <WiFi.h> #include <WiFiClient.h> #include <WebServer.h> const char ssid [] = \"ESP32AP-AKIRA\" ; const char pass [] = \"11111111\" ; const IPAddress ip ( 192 , 168 , 0 , 1 ); const IPAddress subnet ( 255 , 255 , 255 , 0 ); WebServer server ( 80 ); const char page [] PROGMEM = R \"=====( <! DOCTYPE html > < html > < head > < meta name = \"viewport\" content = \"width=device-width,initial-scale=1\" > </ head > < body > < center > LED < br > < a href = \"/on\" > ON </ a >< br > < a href = \"/off\" > OFF </ a >< br > </ center > </ body > </ html > ) ===== \"; void handleRoot () { server . send ( 200 , \"text/html\" , page ); } void handleOn (){ digitalWrite ( 4 , HIGH ); Serial . println ( \"LED ON\" ); server . send ( 200 , \"text/html\" , page ); } void handleOff (){ digitalWrite ( 4 , LOW ); Serial . println ( \"LED OFF\" ); server . send ( 200 , \"text/html\" , page ); } void setup () { Serial . begin ( 115200 ); WiFi . softAP ( ssid , pass ); delay ( 100 ); WiFi . softAPConfig ( ip , ip , subnet ); IPAddress serverIP = WiFi . softAPIP (); server . on ( \"/\" , handleRoot ); server . on ( \"/on\" , handleOn ); server . on ( \"/off\" , handleOff ); server . begin (); pinMode ( 4 , OUTPUT ); Serial . println (); Serial . print ( \"AccessPoint:\" ); Serial . println ( ssid ); Serial . print ( \"IP:\" ); Serial . println ( serverIP ); } void loop () { server . handleClient (); } \u9805\u76ee \u5024 http://192.168.0.1/on LED on http://192.168.0.1/off LED off","title":"LED\u3092Web\u304b\u3089\u64cd\u4f5c"},{"location":"3axis/","text":"201 3Axis 201\u3092I2C\u306e\u7aef\u5b50\u306b\u3064\u306a\u304e\u307e\u3059\u3002 \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u53d6\u308a\u8fbc\u307f \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 <!DOCTYPE html> <html> <head> <meta charset= \"UTF-8\" > <meta name= \"viewport\" content= \"width=device-width,initial-scale=1\" > <script type= \"text/javascript\" src= \"denbun.js\" ></script> </head> <body> <br> <center> <input type= \"button\" value= \"Connect\" onclick= \"connect();\" /><br /> <div id= \"axis_x\" ></div><br /> <div id= \"axis_y\" ></div><br /> <div id= \"axis_z\" ></div><br /> </center> </body> </html> denbun.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 var webSocket = null ; function connect () { if ( webSocket == null ) { webSocket = new WebSocket ( \"ws://192.168.0.1/denbun\" ); webSocket . onopen = onOpen ; webSocket . onmessage = onMessage ; webSocket . onclose = onClose ; webSocket . onerror = onError ; } } function send ( msg ) { if ( webSocket != null ) { webSocket . send ( \"\" + msg ); } } function onOpen ( event ) { alert ( \"Connect\" ); } function onMessage ( event ) { if ( event && event . data ) { var response = event . data ; var axis = response . split ( ',' ); document . getElementById ( \"axis_x\" ). innerHTML = axis [ 0 ]; document . getElementById ( \"axis_y\" ). innerHTML = axis [ 1 ]; document . getElementById ( \"axis_z\" ). innerHTML = axis [ 2 ]; } } function onClose ( event ) { webSocket = null ; } function onError ( event ) {} Arduino 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 #include \"ESPAsyncWebServer.h\" #include \"FS.h\" #include \"SPIFFS.h\" #include <FaBo3Axis_ADXL345.h> FaBo3Axis fabo3axis ; const char ssid [] = \"ESP32AP-AKIRA\" ; const char pass [] = \"11111111\" ; const IPAddress ip ( 192 , 168 , 0 , 1 ); const IPAddress subnet ( 255 , 255 , 255 , 0 ); AsyncWebServer server ( 80 ); AsyncWebSocket ws ( \"/denbun\" ); boolean connect = false ; uint16_t id = 0 ; void onEvent ( AsyncWebSocket * server , AsyncWebSocketClient * client , AwsEventType type , void * arg , uint8_t * data , size_t len ){ if ( type == WS_EVT_CONNECT ){ connect = true ; Serial . printf ( \"ws(url=%s,id=%u) connect \\n \" , server -> url (), client -> id ()); } else if ( type == WS_EVT_DISCONNECT ){ connect = false ; Serial . println ( \"Client disconnected.\" ); } else if ( type == WS_EVT_DATA ){ String msg = \"\" ; id = client -> id (); AwsFrameInfo * info = ( AwsFrameInfo * ) arg ; if ( info -> opcode == WS_TEXT ){ for ( size_t i = 0 ; i < info -> len ; i ++ ) { msg += ( char ) data [ i ]; } } Serial . println ( id ); Serial . println ( msg ); } } void setup () { Serial . begin ( 115200 ); SPIFFS . begin (); WiFi . softAP ( ssid , pass ); delay ( 100 ); WiFi . softAPConfig ( ip , ip , subnet ); IPAddress serverIP = WiFi . softAPIP (); ws . onEvent ( onEvent ); server . addHandler ( & ws ); server . on ( \"/\" , HTTP_GET , []( AsyncWebServerRequest * request ){ request -> send ( SPIFFS , \"/index.html\" , \"text/html\" ); }); server . on ( \"/denbun.js\" , HTTP_GET , []( AsyncWebServerRequest * request ){ request -> send ( SPIFFS , \"/denbun.js\" , \"application/javascript\" ); }); server . begin (); if ( fabo3axis . searchDevice ()){ Serial . println ( \"I am ADXL345\" ); } Serial . println ( \"Init...\" ); fabo3axis . configuration (); fabo3axis . powerOn (); Serial . println (); Serial . print ( \"AccessPoint:\" ); Serial . println ( ssid ); Serial . print ( \"IP:\" ); Serial . println ( serverIP ); } void loop () { int x ; int y ; int z ; fabo3axis . readXYZ ( & x , & y , & z ); if ( connect ) { String msg = \"\" + x + \",\" + y + \",\" + z ; ws . text ( id , msg ); } }","title":"201 3Axis"},{"location":"3axis/#201-3axis","text":"201\u3092I2C\u306e\u7aef\u5b50\u306b\u3064\u306a\u304e\u307e\u3059\u3002","title":"201 3Axis"},{"location":"3axis/#_1","text":"","title":"\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u53d6\u308a\u8fbc\u307f"},{"location":"3axis/#_2","text":"index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 <!DOCTYPE html> <html> <head> <meta charset= \"UTF-8\" > <meta name= \"viewport\" content= \"width=device-width,initial-scale=1\" > <script type= \"text/javascript\" src= \"denbun.js\" ></script> </head> <body> <br> <center> <input type= \"button\" value= \"Connect\" onclick= \"connect();\" /><br /> <div id= \"axis_x\" ></div><br /> <div id= \"axis_y\" ></div><br /> <div id= \"axis_z\" ></div><br /> </center> </body> </html> denbun.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 var webSocket = null ; function connect () { if ( webSocket == null ) { webSocket = new WebSocket ( \"ws://192.168.0.1/denbun\" ); webSocket . onopen = onOpen ; webSocket . onmessage = onMessage ; webSocket . onclose = onClose ; webSocket . onerror = onError ; } } function send ( msg ) { if ( webSocket != null ) { webSocket . send ( \"\" + msg ); } } function onOpen ( event ) { alert ( \"Connect\" ); } function onMessage ( event ) { if ( event && event . data ) { var response = event . data ; var axis = response . split ( ',' ); document . getElementById ( \"axis_x\" ). innerHTML = axis [ 0 ]; document . getElementById ( \"axis_y\" ). innerHTML = axis [ 1 ]; document . getElementById ( \"axis_z\" ). innerHTML = axis [ 2 ]; } } function onClose ( event ) { webSocket = null ; } function onError ( event ) {} Arduino 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 #include \"ESPAsyncWebServer.h\" #include \"FS.h\" #include \"SPIFFS.h\" #include <FaBo3Axis_ADXL345.h> FaBo3Axis fabo3axis ; const char ssid [] = \"ESP32AP-AKIRA\" ; const char pass [] = \"11111111\" ; const IPAddress ip ( 192 , 168 , 0 , 1 ); const IPAddress subnet ( 255 , 255 , 255 , 0 ); AsyncWebServer server ( 80 ); AsyncWebSocket ws ( \"/denbun\" ); boolean connect = false ; uint16_t id = 0 ; void onEvent ( AsyncWebSocket * server , AsyncWebSocketClient * client , AwsEventType type , void * arg , uint8_t * data , size_t len ){ if ( type == WS_EVT_CONNECT ){ connect = true ; Serial . printf ( \"ws(url=%s,id=%u) connect \\n \" , server -> url (), client -> id ()); } else if ( type == WS_EVT_DISCONNECT ){ connect = false ; Serial . println ( \"Client disconnected.\" ); } else if ( type == WS_EVT_DATA ){ String msg = \"\" ; id = client -> id (); AwsFrameInfo * info = ( AwsFrameInfo * ) arg ; if ( info -> opcode == WS_TEXT ){ for ( size_t i = 0 ; i < info -> len ; i ++ ) { msg += ( char ) data [ i ]; } } Serial . println ( id ); Serial . println ( msg ); } } void setup () { Serial . begin ( 115200 ); SPIFFS . begin (); WiFi . softAP ( ssid , pass ); delay ( 100 ); WiFi . softAPConfig ( ip , ip , subnet ); IPAddress serverIP = WiFi . softAPIP (); ws . onEvent ( onEvent ); server . addHandler ( & ws ); server . on ( \"/\" , HTTP_GET , []( AsyncWebServerRequest * request ){ request -> send ( SPIFFS , \"/index.html\" , \"text/html\" ); }); server . on ( \"/denbun.js\" , HTTP_GET , []( AsyncWebServerRequest * request ){ request -> send ( SPIFFS , \"/denbun.js\" , \"application/javascript\" ); }); server . begin (); if ( fabo3axis . searchDevice ()){ Serial . println ( \"I am ADXL345\" ); } Serial . println ( \"Init...\" ); fabo3axis . configuration (); fabo3axis . powerOn (); Serial . println (); Serial . print ( \"AccessPoint:\" ); Serial . println ( ssid ); Serial . print ( \"IP:\" ); Serial . println ( serverIP ); } void loop () { int x ; int y ; int z ; fabo3axis . readXYZ ( & x , & y , & z ); if ( connect ) { String msg = \"\" + x + \",\" + y + \",\" + z ; ws . text ( id , msg ); } }","title":"\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9"},{"location":"4.spiffs/","text":"SPIFFS ESP32\u306b\u306f\u3001\u4fdd\u5b58\u9818\u57df\u3068\u3057\u3066SPIFFS\u304c\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002 SPIFFS\u3078Arduino IDE\u304b\u3089\u30a2\u30af\u30bb\u30b9\u3092\u53ef\u80fd\u306b\u3059\u308bPlugin https://github.com/me-no-dev/arduino-esp32fs-plugin/releases \u304b\u3089ESP32FS-v0.1.zip\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3001\u89e3\u51cd\u3057\u307e\u3059\u3002 \u89e3\u51cd\u3057\u3066\u3067\u304d\u305f\u30d5\u30a9\u30eb\u30c0\u3092Ardiono-Contents-Java-tools \u4ee5\u4e0b\u306b\u30b3\u30d4\u30fc\u3057\u307e\u3059\u3002 Arduino\u3000IDE\u3092\u518d\u8d77\u52d5\u3057\u3001\u30c4\u30fc\u30eb\u306b\u3001ESP32 Sketch Data Upload\u304c\u8ffd\u52a0\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3002 Data\u306eUpload Arduno IDE\u304b\u3089\u3001\u30b9\u30b1\u30c3\u30c1-\u30b9\u30b1\u30c3\u30c1\u30d5\u30a9\u30eb\u30c0\u3092\u8868\u793a\u3092\u9078\u629e\u3057\u307e\u3059\u3002 data\u30d5\u30a9\u30eb\u30c0\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 \u6b21\u306bdata\u30d5\u30a9\u30eb\u30c0\u306e\u4e2d\u306b\u3001index.html \u3092\u4f5c\u6210\u3057\u3001\u4fdd\u5b58\u3057\u307e\u3059\u3002 1 2 3 4 5 <html> <body> Hello World! </body> </html> ESP32 Sketch Data Upload\u3067index.html\u3092Upload\u3057\u307e\u3059\u3002 ESPAsyncWebServer\u306e\u7d44\u307f\u8fbc\u307f https://github.com/me-no-dev/ESPAsyncWebServer \u3088\u308aESPAsyncWebServer\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u304d\u307e\u3059\u3002 Arduino IDE\u306e[\u30b9\u30b1\u30c3\u30c1]-[\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30af\u30eb\u30fc\u30c9]-[ZIP\u5f62\u5f0f\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9]\u3067\u3001\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u304d\u305fzip\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 AsyncTCP\u306e\u7d44\u307f\u8fbc\u307f https://github.com/me-no-dev/AsyncTCP/tree/idf-update \u3088\u308aAsyncTCP\u306eidf-update\u30d6\u30e9\u30f3\u30c1\u304b\u3089\u3001AyncTCP\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u304d\u307e\u3059\u3002 Arduino IDE\u306e[\u30b9\u30b1\u30c3\u30c1]-[\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30af\u30eb\u30fc\u30c9]-[ZIP\u5f62\u5f0f\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9]\u3067\u3001\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u304d\u305fzip\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 AP\u3068WebServer 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #include <WiFi.h> #include \"ESPAsyncWebServer.h\" #include \"FS.h\" #include \"SPIFFS.h\" const char ssid [] = \"ESP32AP-AKIRA\" ; const char pass [] = \"11111111\" ; const IPAddress ip ( 192 , 168 , 0 , 1 ); const IPAddress subnet ( 255 , 255 , 255 , 0 ); AsyncWebServer server ( 80 ); void setup () { Serial . begin ( 115200 ); SPIFFS . begin (); WiFi . softAP ( ssid , pass ); delay ( 100 ); WiFi . softAPConfig ( ip , ip , subnet ); IPAddress serverIP = WiFi . softAPIP (); server . on ( \"/\" , HTTP_GET , []( AsyncWebServerRequest * request ){ request -> send ( SPIFFS , \"/index.html\" , \"text/html\" ); }); server . begin (); Serial . println (); Serial . print ( \"AccessPoint:\" ); Serial . println ( ssid ); Serial . print ( \"IP:\" ); Serial . println ( serverIP ); } void loop () {}","title":"SPIFFS"},{"location":"4.spiffs/#spiffs","text":"ESP32\u306b\u306f\u3001\u4fdd\u5b58\u9818\u57df\u3068\u3057\u3066SPIFFS\u304c\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002","title":"SPIFFS"},{"location":"4.spiffs/#spiffsarduino-ideplugin","text":"https://github.com/me-no-dev/arduino-esp32fs-plugin/releases \u304b\u3089ESP32FS-v0.1.zip\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3001\u89e3\u51cd\u3057\u307e\u3059\u3002 \u89e3\u51cd\u3057\u3066\u3067\u304d\u305f\u30d5\u30a9\u30eb\u30c0\u3092Ardiono-Contents-Java-tools \u4ee5\u4e0b\u306b\u30b3\u30d4\u30fc\u3057\u307e\u3059\u3002 Arduino\u3000IDE\u3092\u518d\u8d77\u52d5\u3057\u3001\u30c4\u30fc\u30eb\u306b\u3001ESP32 Sketch Data Upload\u304c\u8ffd\u52a0\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3002","title":"SPIFFS\u3078Arduino IDE\u304b\u3089\u30a2\u30af\u30bb\u30b9\u3092\u53ef\u80fd\u306b\u3059\u308bPlugin"},{"location":"4.spiffs/#dataupload","text":"Arduno IDE\u304b\u3089\u3001\u30b9\u30b1\u30c3\u30c1-\u30b9\u30b1\u30c3\u30c1\u30d5\u30a9\u30eb\u30c0\u3092\u8868\u793a\u3092\u9078\u629e\u3057\u307e\u3059\u3002 data\u30d5\u30a9\u30eb\u30c0\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 \u6b21\u306bdata\u30d5\u30a9\u30eb\u30c0\u306e\u4e2d\u306b\u3001index.html \u3092\u4f5c\u6210\u3057\u3001\u4fdd\u5b58\u3057\u307e\u3059\u3002 1 2 3 4 5 <html> <body> Hello World! </body> </html> ESP32 Sketch Data Upload\u3067index.html\u3092Upload\u3057\u307e\u3059\u3002","title":"Data\u306eUpload"},{"location":"4.spiffs/#espasyncwebserver","text":"https://github.com/me-no-dev/ESPAsyncWebServer \u3088\u308aESPAsyncWebServer\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u304d\u307e\u3059\u3002 Arduino IDE\u306e[\u30b9\u30b1\u30c3\u30c1]-[\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30af\u30eb\u30fc\u30c9]-[ZIP\u5f62\u5f0f\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9]\u3067\u3001\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u304d\u305fzip\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002","title":"ESPAsyncWebServer\u306e\u7d44\u307f\u8fbc\u307f"},{"location":"4.spiffs/#asynctcp","text":"https://github.com/me-no-dev/AsyncTCP/tree/idf-update \u3088\u308aAsyncTCP\u306eidf-update\u30d6\u30e9\u30f3\u30c1\u304b\u3089\u3001AyncTCP\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u304d\u307e\u3059\u3002 Arduino IDE\u306e[\u30b9\u30b1\u30c3\u30c1]-[\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30af\u30eb\u30fc\u30c9]-[ZIP\u5f62\u5f0f\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9]\u3067\u3001\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u304d\u305fzip\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002","title":"AsyncTCP\u306e\u7d44\u307f\u8fbc\u307f"},{"location":"4.spiffs/#apwebserver","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #include <WiFi.h> #include \"ESPAsyncWebServer.h\" #include \"FS.h\" #include \"SPIFFS.h\" const char ssid [] = \"ESP32AP-AKIRA\" ; const char pass [] = \"11111111\" ; const IPAddress ip ( 192 , 168 , 0 , 1 ); const IPAddress subnet ( 255 , 255 , 255 , 0 ); AsyncWebServer server ( 80 ); void setup () { Serial . begin ( 115200 ); SPIFFS . begin (); WiFi . softAP ( ssid , pass ); delay ( 100 ); WiFi . softAPConfig ( ip , ip , subnet ); IPAddress serverIP = WiFi . softAPIP (); server . on ( \"/\" , HTTP_GET , []( AsyncWebServerRequest * request ){ request -> send ( SPIFFS , \"/index.html\" , \"text/html\" ); }); server . begin (); Serial . println (); Serial . print ( \"AccessPoint:\" ); Serial . println ( ssid ); Serial . print ( \"IP:\" ); Serial . println ( serverIP ); } void loop () {}","title":"AP\u3068WebServer"},{"location":"5.robot/","text":"RobotCar\u306e\u5236\u5fa1 FaBo Denbun\u3092\u3064\u304b\u3063\u3066RobotCar\u3092\u5236\u5fa1\u3057\u307e\u3059\u3002 \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 Arduino 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 #include <WiFi.h> #include <WiFiClient.h> #include <WebServer.h> #include \"FaBoPWM_PCA9685.h\" FaBoPWM faboPWM ; const char ssid [] = \"ESP32AP-AKIRA\" ; const char pass [] = \"11111111\" ; const IPAddress ip ( 192 , 168 , 0 , 1 ); const IPAddress subnet ( 255 , 255 , 255 , 0 ); WebServer server ( 80 ); const char page [] PROGMEM = R \"=====( <! DOCTYPE html > < html > < head > < meta charset = \"UTF-8\" > < meta http - equiv = \"Refresh\" content = \"3\" > < meta name = \"viewport\" content = \"width=device-width,initial-scale=1\" > </ head > < body > < center > < input type = \"button\" value = \"\u2191\" onClick = \"location.href='/forward'\" >< br > < input type = \"button\" value = \"\u2190\" onClick = \"location.href='/right'\" > < input type = \"button\" value = \"\u25a1\" onClick = \"location.href='/stop'\" > < input type = \"button\" value = \"\u2192\" onClick = \"location.href='/left'\" >< br > < input type = \"button\" value = \"\u2193\" onClick = \"location.href='/back'\" >< br > </ center > </ body > </ html > ) ===== \"; int STOP = 0 ; int FORWARD = 400 ; int BACK = 250 ; void handleRoot () { server . send ( 200 , \"text/html\" , page ); } void handleStop (){ faboPWM . set_channel_value ( 0 , STOP ); faboPWM . set_channel_value ( 1 , STOP ); server . send ( 200 , \"text/html\" , page ); } void handleForward (){ faboPWM . set_channel_value ( 0 , FORWARD ); faboPWM . set_channel_value ( 1 , BACK ); server . send ( 200 , \"text/html\" , page ); } void handleBack (){ faboPWM . set_channel_value ( 0 , BACK ); faboPWM . set_channel_value ( 1 , FORWARD ); server . send ( 200 , \"text/html\" , page ); } void handleLeft (){ faboPWM . set_channel_value ( 0 , FORWARD ); faboPWM . set_channel_value ( 1 , FORWARD ); server . send ( 200 , \"text/html\" , page ); } void handleRight (){ faboPWM . set_channel_value ( 0 , BACK ); faboPWM . set_channel_value ( 1 , BACK ); server . send ( 200 , \"text/html\" , page ); } void setup () { Serial . begin ( 115200 ); if ( faboPWM . begin ()) { Serial . println ( \"Find PCA9685\" ); faboPWM . init ( 300 ); } faboPWM . set_hz ( 50 ); faboPWM . set_channel_value ( 0 , STOP ); faboPWM . set_channel_value ( 1 , STOP ); WiFi . softAP ( ssid , pass ); delay ( 100 ); WiFi . softAPConfig ( ip , ip , subnet ); IPAddress serverIP = WiFi . softAPIP (); server . on ( \"/\" , handleRoot ); server . on ( \"/stop\" , handleStop ); server . on ( \"/forward\" , handleForward ); server . on ( \"/back\" , handleBack ); server . on ( \"/left\" , handleLeft ); server . on ( \"/right\" , handleRight ); server . begin (); pinMode ( 4 , OUTPUT ); Serial . println (); Serial . print ( \"AccessPoint:\" ); Serial . println ( ssid ); Serial . print ( \"IP:\" ); Serial . println ( serverIP ); } void loop () { server . handleClient (); }","title":"RobotCar\u306e\u5236\u5fa1"},{"location":"5.robot/#robotcar","text":"FaBo Denbun\u3092\u3064\u304b\u3063\u3066RobotCar\u3092\u5236\u5fa1\u3057\u307e\u3059\u3002","title":"RobotCar\u306e\u5236\u5fa1"},{"location":"5.robot/#_1","text":"Arduino 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 #include <WiFi.h> #include <WiFiClient.h> #include <WebServer.h> #include \"FaBoPWM_PCA9685.h\" FaBoPWM faboPWM ; const char ssid [] = \"ESP32AP-AKIRA\" ; const char pass [] = \"11111111\" ; const IPAddress ip ( 192 , 168 , 0 , 1 ); const IPAddress subnet ( 255 , 255 , 255 , 0 ); WebServer server ( 80 ); const char page [] PROGMEM = R \"=====( <! DOCTYPE html > < html > < head > < meta charset = \"UTF-8\" > < meta http - equiv = \"Refresh\" content = \"3\" > < meta name = \"viewport\" content = \"width=device-width,initial-scale=1\" > </ head > < body > < center > < input type = \"button\" value = \"\u2191\" onClick = \"location.href='/forward'\" >< br > < input type = \"button\" value = \"\u2190\" onClick = \"location.href='/right'\" > < input type = \"button\" value = \"\u25a1\" onClick = \"location.href='/stop'\" > < input type = \"button\" value = \"\u2192\" onClick = \"location.href='/left'\" >< br > < input type = \"button\" value = \"\u2193\" onClick = \"location.href='/back'\" >< br > </ center > </ body > </ html > ) ===== \"; int STOP = 0 ; int FORWARD = 400 ; int BACK = 250 ; void handleRoot () { server . send ( 200 , \"text/html\" , page ); } void handleStop (){ faboPWM . set_channel_value ( 0 , STOP ); faboPWM . set_channel_value ( 1 , STOP ); server . send ( 200 , \"text/html\" , page ); } void handleForward (){ faboPWM . set_channel_value ( 0 , FORWARD ); faboPWM . set_channel_value ( 1 , BACK ); server . send ( 200 , \"text/html\" , page ); } void handleBack (){ faboPWM . set_channel_value ( 0 , BACK ); faboPWM . set_channel_value ( 1 , FORWARD ); server . send ( 200 , \"text/html\" , page ); } void handleLeft (){ faboPWM . set_channel_value ( 0 , FORWARD ); faboPWM . set_channel_value ( 1 , FORWARD ); server . send ( 200 , \"text/html\" , page ); } void handleRight (){ faboPWM . set_channel_value ( 0 , BACK ); faboPWM . set_channel_value ( 1 , BACK ); server . send ( 200 , \"text/html\" , page ); } void setup () { Serial . begin ( 115200 ); if ( faboPWM . begin ()) { Serial . println ( \"Find PCA9685\" ); faboPWM . init ( 300 ); } faboPWM . set_hz ( 50 ); faboPWM . set_channel_value ( 0 , STOP ); faboPWM . set_channel_value ( 1 , STOP ); WiFi . softAP ( ssid , pass ); delay ( 100 ); WiFi . softAPConfig ( ip , ip , subnet ); IPAddress serverIP = WiFi . softAPIP (); server . on ( \"/\" , handleRoot ); server . on ( \"/stop\" , handleStop ); server . on ( \"/forward\" , handleForward ); server . on ( \"/back\" , handleBack ); server . on ( \"/left\" , handleLeft ); server . on ( \"/right\" , handleRight ); server . begin (); pinMode ( 4 , OUTPUT ); Serial . println (); Serial . print ( \"AccessPoint:\" ); Serial . println ( ssid ); Serial . print ( \"IP:\" ); Serial . println ( serverIP ); } void loop () { server . handleClient (); }","title":"\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9"},{"location":"6.color/","text":"203 Color 203\u3092I2C\u306e\u7aef\u5b50\u306b\u3064\u306a\u304e\u307e\u3059\u3002 \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u53d6\u308a\u8fbc\u307f \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u3001\u5b9f\u969b\u306b\u8272\u304c\u53d6\u308c\u3066\u3044\u308b\u4e8b\u3092\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\u3002 \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 <!DOCTYPE html> <html> <head> <meta charset= \"UTF-8\" > <meta http-equiv= \"Refresh\" content= \"3\" > <meta name= \"viewport\" content= \"width=device-width,initial-scale=1\" > </head> <body> <center> <input type= \"button\" value= \"\u2191\" onClick= \"location.href='/forward'\" ><br> <input type= \"button\" value= \"\u2190\" onClick= \"location.href='/right'\" > <input type= \"button\" value= \"\u25a1\" onClick= \"location.href='/stop'\" > <input type= \"button\" value= \"\u2192\" onClick= \"location.href='/left'\" ><br> <input type= \"button\" value= \"\u2193\" onClick= \"location.href='/back'\" ><br> </center> </body> </html> Arduino 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 #include \"WiFi.h\" #include \"ESPAsyncWebServer.h\" #include \"FS.h\" #include \"SPIFFS.h\" #include \"./FaBoColor_S11059.h\" #include \"Arduino.h\" FaBoColor faboColor ; uint16_t r , g , b , i ; const char ssid [] = \"ESP32AP-AKIRA\" ; const char pass [] = \"11111111\" ; const IPAddress ip ( 192 , 168 , 0 , 1 ); const IPAddress subnet ( 255 , 255 , 255 , 0 ); AsyncWebServer server ( 80 ); int RED_MIN = 300 ; int RED_MAX = 700 ; int GREEN_MIN = 230 ; int GREEN_MAX = 700 ; int BLUE_MIN = 100 ; int BLUE_MAX = 630 ;; String processor ( const String & var ) { if ( var == \"COLOR\" ) { if ( r < RED_MIN ) r = RED_MIN ; if ( g < GREEN_MIN ) g = GREEN_MIN ; if ( b < BLUE_MIN ) b = BLUE_MIN ; if ( r > RED_MAX ) r = RED_MAX ; if ( g > GREEN_MAX ) g = GREEN_MAX ; if ( b > BLUE_MAX ) b = BLUE_MAX ; r = map ( r , RED_MIN , RED_MAX , 0 , 255 ); g = map ( g , GREEN_MIN , GREEN_MAX , 0 , 255 ); b = map ( b , BLUE_MIN , BLUE_MAX , 0 , 255 ); if ( r <= 0x0f ) { red = \"0\" + String ( r , HEX ); } else { red = String ( r , HEX ); } if ( g <= 0x0f ) { green = \"0\" + String ( g , HEX ); } else { green = String ( g , HEX ); } if ( b <= 0x0f ) { blue = \"0\" + String ( b , HEX ); } else { blue = String ( b , HEX ); } String color = \"#\" + red + green + blue ; Serial . println ( color ); return color ; } return String (); } void setup () { Serial . begin ( 115200 ); faboColor . begin (); SPIFFS . begin (); WiFi . softAP ( ssid , pass ); delay ( 100 ); WiFi . softAPConfig ( ip , ip , subnet ); IPAddress serverIP = WiFi . softAPIP (); server . on ( \"/\" , HTTP_GET , []( AsyncWebServerRequest * request ){ request -> send ( SPIFFS , \"/index.html\" , \"text/html\" ); }); server . on ( \"/color\" , HTTP_GET , []( AsyncWebServerRequest * request ){ Serial . println ( \"Color\" ); faboColor . readRGBI ( & r , & g , & b , & i ); request -> send ( SPIFFS , \"/index.html\" , String (), false , processor ); }); server . begin (); Serial . println (); Serial . print ( \"AccessPoint:\" ); Serial . println ( ssid ); Serial . print ( \"IP:\" ); Serial . println ( serverIP ); } void loop () { } \u30ad\u30e3\u30ea\u30d6\u30ec\u30fc\u30b7\u30e7\u30f3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 int RED_MIN = 300 ; int RED_MAX = 700 ; int GREEN_MIN = 200 ; int GREEN_MAX = 700 ; int BLUE_MIN = 200 ; int BLUE_MAX = 630 ; String processor ( const String & var ) { if ( var == \"COLOR\" ) { Serial . print ( \"red:\" ); Serial . println ( r ); Serial . print ( \"green:\" ); Serial . println ( g ); Serial . print ( \"blue:\" ); Serial . println ( b ); if ( r < RED_MIN ) r = RED_MIN ; if ( g < GREEN_MIN ) g = GREEN_MIN ; if ( b < BLUE_MIN ) b = BLUE_MIN ; if ( r > RED_MAX ) r = RED_MAX ; if ( g > GREEN_MAX ) g = GREEN_MAX ; if ( b > BLUE_MAX ) b = BLUE_MAX ; r = map ( r , RED_MIN , RED_MAX , 0 , 255 ); g = map ( g , GREEN_MIN , GREEN_MAX , 0 , 255 ); b = map ( b , BLUE_MIN , BLUE_MAX , 0 , 255 ); if ( r <= 0x0f ) { red = \"0\" + String ( r , HEX ); } else { red = String ( r , HEX ); } if ( g <= 0x0f ) { green = \"0\" + String ( g , HEX ); } else { green = String ( g , HEX ); } if ( b <= 0x0f ) { blue = \"0\" + String ( b , HEX ); } else { blue = String ( b , HEX ); } Serial . print ( \"red:\" ); Serial . println ( r ); Serial . print ( \"green:\" ); Serial . println ( g ); Serial . print ( \"blue:\" ); Serial . println ( b ); String color = \"#\" + red + green + blue ; Serial . println ( color ); return color ; } return String (); } \u306e\u5024\u3092\u8abf\u6574\u3057\u3066\u6821\u6b63\u3057\u307e\u3059\u3002","title":"203 Color"},{"location":"6.color/#203-color","text":"203\u3092I2C\u306e\u7aef\u5b50\u306b\u3064\u306a\u304e\u307e\u3059\u3002","title":"203 Color"},{"location":"6.color/#_1","text":"\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u3001\u5b9f\u969b\u306b\u8272\u304c\u53d6\u308c\u3066\u3044\u308b\u4e8b\u3092\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\u3002","title":"\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u53d6\u308a\u8fbc\u307f"},{"location":"6.color/#_2","text":"index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 <!DOCTYPE html> <html> <head> <meta charset= \"UTF-8\" > <meta http-equiv= \"Refresh\" content= \"3\" > <meta name= \"viewport\" content= \"width=device-width,initial-scale=1\" > </head> <body> <center> <input type= \"button\" value= \"\u2191\" onClick= \"location.href='/forward'\" ><br> <input type= \"button\" value= \"\u2190\" onClick= \"location.href='/right'\" > <input type= \"button\" value= \"\u25a1\" onClick= \"location.href='/stop'\" > <input type= \"button\" value= \"\u2192\" onClick= \"location.href='/left'\" ><br> <input type= \"button\" value= \"\u2193\" onClick= \"location.href='/back'\" ><br> </center> </body> </html> Arduino 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 #include \"WiFi.h\" #include \"ESPAsyncWebServer.h\" #include \"FS.h\" #include \"SPIFFS.h\" #include \"./FaBoColor_S11059.h\" #include \"Arduino.h\" FaBoColor faboColor ; uint16_t r , g , b , i ; const char ssid [] = \"ESP32AP-AKIRA\" ; const char pass [] = \"11111111\" ; const IPAddress ip ( 192 , 168 , 0 , 1 ); const IPAddress subnet ( 255 , 255 , 255 , 0 ); AsyncWebServer server ( 80 ); int RED_MIN = 300 ; int RED_MAX = 700 ; int GREEN_MIN = 230 ; int GREEN_MAX = 700 ; int BLUE_MIN = 100 ; int BLUE_MAX = 630 ;; String processor ( const String & var ) { if ( var == \"COLOR\" ) { if ( r < RED_MIN ) r = RED_MIN ; if ( g < GREEN_MIN ) g = GREEN_MIN ; if ( b < BLUE_MIN ) b = BLUE_MIN ; if ( r > RED_MAX ) r = RED_MAX ; if ( g > GREEN_MAX ) g = GREEN_MAX ; if ( b > BLUE_MAX ) b = BLUE_MAX ; r = map ( r , RED_MIN , RED_MAX , 0 , 255 ); g = map ( g , GREEN_MIN , GREEN_MAX , 0 , 255 ); b = map ( b , BLUE_MIN , BLUE_MAX , 0 , 255 ); if ( r <= 0x0f ) { red = \"0\" + String ( r , HEX ); } else { red = String ( r , HEX ); } if ( g <= 0x0f ) { green = \"0\" + String ( g , HEX ); } else { green = String ( g , HEX ); } if ( b <= 0x0f ) { blue = \"0\" + String ( b , HEX ); } else { blue = String ( b , HEX ); } String color = \"#\" + red + green + blue ; Serial . println ( color ); return color ; } return String (); } void setup () { Serial . begin ( 115200 ); faboColor . begin (); SPIFFS . begin (); WiFi . softAP ( ssid , pass ); delay ( 100 ); WiFi . softAPConfig ( ip , ip , subnet ); IPAddress serverIP = WiFi . softAPIP (); server . on ( \"/\" , HTTP_GET , []( AsyncWebServerRequest * request ){ request -> send ( SPIFFS , \"/index.html\" , \"text/html\" ); }); server . on ( \"/color\" , HTTP_GET , []( AsyncWebServerRequest * request ){ Serial . println ( \"Color\" ); faboColor . readRGBI ( & r , & g , & b , & i ); request -> send ( SPIFFS , \"/index.html\" , String (), false , processor ); }); server . begin (); Serial . println (); Serial . print ( \"AccessPoint:\" ); Serial . println ( ssid ); Serial . print ( \"IP:\" ); Serial . println ( serverIP ); } void loop () { }","title":"\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9"},{"location":"6.color/#_3","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 int RED_MIN = 300 ; int RED_MAX = 700 ; int GREEN_MIN = 200 ; int GREEN_MAX = 700 ; int BLUE_MIN = 200 ; int BLUE_MAX = 630 ; String processor ( const String & var ) { if ( var == \"COLOR\" ) { Serial . print ( \"red:\" ); Serial . println ( r ); Serial . print ( \"green:\" ); Serial . println ( g ); Serial . print ( \"blue:\" ); Serial . println ( b ); if ( r < RED_MIN ) r = RED_MIN ; if ( g < GREEN_MIN ) g = GREEN_MIN ; if ( b < BLUE_MIN ) b = BLUE_MIN ; if ( r > RED_MAX ) r = RED_MAX ; if ( g > GREEN_MAX ) g = GREEN_MAX ; if ( b > BLUE_MAX ) b = BLUE_MAX ; r = map ( r , RED_MIN , RED_MAX , 0 , 255 ); g = map ( g , GREEN_MIN , GREEN_MAX , 0 , 255 ); b = map ( b , BLUE_MIN , BLUE_MAX , 0 , 255 ); if ( r <= 0x0f ) { red = \"0\" + String ( r , HEX ); } else { red = String ( r , HEX ); } if ( g <= 0x0f ) { green = \"0\" + String ( g , HEX ); } else { green = String ( g , HEX ); } if ( b <= 0x0f ) { blue = \"0\" + String ( b , HEX ); } else { blue = String ( b , HEX ); } Serial . print ( \"red:\" ); Serial . println ( r ); Serial . print ( \"green:\" ); Serial . println ( g ); Serial . print ( \"blue:\" ); Serial . println ( b ); String color = \"#\" + red + green + blue ; Serial . println ( color ); return color ; } return String (); } \u306e\u5024\u3092\u8abf\u6574\u3057\u3066\u6821\u6b63\u3057\u307e\u3059\u3002","title":"\u30ad\u30e3\u30ea\u30d6\u30ec\u30fc\u30b7\u30e7\u30f3"},{"location":"html/","text":"\u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u5411\u3051HTML \u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u306e\u753b\u9762\u306b\u6700\u9069\u5316 index.html 1 2 3 4 5 6 7 8 9 10 <!DOCTYPE html> <html> <head> <meta charset= \"UTF-8\" > <meta name= \"viewport\" content= \"width=device-width,initial-scale=1\" > </head> <body> Hello World </body> </html> JavaScript\u3092\u7d44\u307f\u8fbc\u307f index.html 1 2 3 4 5 6 7 8 9 10 11 <!DOCTYPE html> <html> <head> <meta charset= \"UTF-8\" > <meta name= \"viewport\" content= \"width=device-width,initial-scale=1\" > <script type= \"text/javascript\" src= \"denbun.js\" ></script> </head> <body> Hello World </body> </html> denbun.js 1 alert ( \"HelloWorld\" ); Arduino \u30b9\u30b1\u30c3\u30c1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 #include <WiFi.h> #include \"ESPAsyncWebServer.h\" #include \"FS.h\" #include \"SPIFFS.h\" const char ssid [] = \"ESP32AP-AKIRA\" ; const char pass [] = \"11111111\" ; const IPAddress ip ( 192 , 168 , 0 , 1 ); const IPAddress subnet ( 255 , 255 , 255 , 0 ); AsyncWebServer server ( 80 ); void setup () { Serial . begin ( 115200 ); SPIFFS . begin (); WiFi . softAP ( ssid , pass ); delay ( 100 ); WiFi . softAPConfig ( ip , ip , subnet ); IPAddress serverIP = WiFi . softAPIP (); server . on ( \"/\" , HTTP_GET , []( AsyncWebServerRequest * request ){ request -> send ( SPIFFS , \"/index.html\" , \"text/html\" ); }); server . on ( \"/denbun.js\" , HTTP_GET , []( AsyncWebServerRequest * request ){ request -> send ( SPIFFS , \"/denbun.js\" , \"application/javascript\" ); }); server . begin (); Serial . println (); Serial . print ( \"AccessPoint:\" ); Serial . println ( ssid ); Serial . print ( \"IP:\" ); Serial . println ( serverIP ); } void loop () {}","title":"\u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u5411\u3051HTML"},{"location":"html/#html","text":"","title":"\u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u5411\u3051HTML"},{"location":"html/#_1","text":"index.html 1 2 3 4 5 6 7 8 9 10 <!DOCTYPE html> <html> <head> <meta charset= \"UTF-8\" > <meta name= \"viewport\" content= \"width=device-width,initial-scale=1\" > </head> <body> Hello World </body> </html>","title":"\u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u306e\u753b\u9762\u306b\u6700\u9069\u5316"},{"location":"html/#javascript","text":"index.html 1 2 3 4 5 6 7 8 9 10 11 <!DOCTYPE html> <html> <head> <meta charset= \"UTF-8\" > <meta name= \"viewport\" content= \"width=device-width,initial-scale=1\" > <script type= \"text/javascript\" src= \"denbun.js\" ></script> </head> <body> Hello World </body> </html> denbun.js 1 alert ( \"HelloWorld\" ); Arduino \u30b9\u30b1\u30c3\u30c1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 #include <WiFi.h> #include \"ESPAsyncWebServer.h\" #include \"FS.h\" #include \"SPIFFS.h\" const char ssid [] = \"ESP32AP-AKIRA\" ; const char pass [] = \"11111111\" ; const IPAddress ip ( 192 , 168 , 0 , 1 ); const IPAddress subnet ( 255 , 255 , 255 , 0 ); AsyncWebServer server ( 80 ); void setup () { Serial . begin ( 115200 ); SPIFFS . begin (); WiFi . softAP ( ssid , pass ); delay ( 100 ); WiFi . softAPConfig ( ip , ip , subnet ); IPAddress serverIP = WiFi . softAPIP (); server . on ( \"/\" , HTTP_GET , []( AsyncWebServerRequest * request ){ request -> send ( SPIFFS , \"/index.html\" , \"text/html\" ); }); server . on ( \"/denbun.js\" , HTTP_GET , []( AsyncWebServerRequest * request ){ request -> send ( SPIFFS , \"/denbun.js\" , \"application/javascript\" ); }); server . begin (); Serial . println (); Serial . print ( \"AccessPoint:\" ); Serial . println ( ssid ); Serial . print ( \"IP:\" ); Serial . println ( serverIP ); } void loop () {}","title":"JavaScript\u3092\u7d44\u307f\u8fbc\u307f"},{"location":"robot_spiffs/","text":"RobotCar\u306e\u5236\u5fa1 FaBo Denbun\u3092\u3064\u304b\u3063\u3066RobotCar\u3092\u5236\u5fa1\u3057\u307e\u3059\u3002 \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 HTML 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 <!DOCTYPE html> <html> <head> <meta charset= \"UTF-8\" > <meta http-equiv= \"Refresh\" content= \"3\" > <meta name= \"viewport\" content= \"width=device-width,initial-scale=1\" > </head> <body> <center> <input type= \"button\" value= \"\u2191\" onClick= \"location.href='/forward'\" ><br> <input type= \"button\" value= \"\u2190\" onClick= \"location.href='/right'\" > <input type= \"button\" value= \"\u25a1\" onClick= \"location.href='/stop'\" > <input type= \"button\" value= \"\u2192\" onClick= \"location.href='/left'\" ><br> <input type= \"button\" value= \"\u2193\" onClick= \"location.href='/back'\" ><br> </center> </body> </html> Arduino 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 #include \"ESPAsyncWebServer.h\" #include \"FS.h\" #include \"SPIFFS.h\" #include \"FaBoPWM_PCA9685.h\" FaBoPWM faboPWM ; const char ssid [] = \"ESP32AP-AKIRA\" ; const char pass [] = \"11111111\" ; const IPAddress ip ( 192 , 168 , 0 , 1 ); const IPAddress subnet ( 255 , 255 , 255 , 0 ); AsyncWebServer server ( 80 ); int STOP = 0 ; int FORWARD = 400 ; int BACK = 250 ; void setup () { Serial . begin ( 115200 ); if ( faboPWM . begin ()) { Serial . println ( \"Find PCA9685\" ); faboPWM . init ( 300 ); } faboPWM . set_hz ( 50 ); faboPWM . set_channel_value ( 0 , STOP ); faboPWM . set_channel_value ( 1 , STOP ); SPIFFS . begin (); WiFi . softAP ( ssid , pass ); delay ( 100 ); WiFi . softAPConfig ( ip , ip , subnet ); IPAddress serverIP = WiFi . softAPIP (); server . on ( \"/\" , HTTP_GET , []( AsyncWebServerRequest * request ){ request -> send ( SPIFFS , \"/index.html\" , \"text/html\" ); }); server . on ( \"/stop\" , HTTP_GET , []( AsyncWebServerRequest * request ){ request -> send ( SPIFFS , \"/index.html\" , \"text/html\" ); faboPWM . set_channel_value ( 0 , STOP ); faboPWM . set_channel_value ( 1 , STOP ); }); server . on ( \"/forward\" , HTTP_GET , []( AsyncWebServerRequest * request ){ request -> send ( SPIFFS , \"/index.html\" , \"text/html\" ); faboPWM . set_channel_value ( 0 , FORWARD ); faboPWM . set_channel_value ( 1 , BACK ); }); server . on ( \"/back\" , HTTP_GET , []( AsyncWebServerRequest * request ){ request -> send ( SPIFFS , \"/index.html\" , \"text/html\" ); faboPWM . set_channel_value ( 0 , BACK ); faboPWM . set_channel_value ( 1 , FORWARD ); }); server . on ( \"/left\" , HTTP_GET , []( AsyncWebServerRequest * request ){ request -> send ( SPIFFS , \"/index.html\" , \"text/html\" ); faboPWM . set_channel_value ( 0 , FORWARD ); faboPWM . set_channel_value ( 1 , FORWARD ); }); server . on ( \"/right\" , HTTP_GET , []( AsyncWebServerRequest * request ){ request -> send ( SPIFFS , \"/index.html\" , \"text/html\" ); faboPWM . set_channel_value ( 0 , BACK ); faboPWM . set_channel_value ( 1 , BACK ); }); server . begin (); Serial . println (); Serial . print ( \"AccessPoint:\" ); Serial . println ( ssid ); Serial . print ( \"IP:\" ); Serial . println ( serverIP ); } void loop () { }","title":"RobotCar\u306e\u5236\u5fa1"},{"location":"robot_spiffs/#robotcar","text":"FaBo Denbun\u3092\u3064\u304b\u3063\u3066RobotCar\u3092\u5236\u5fa1\u3057\u307e\u3059\u3002","title":"RobotCar\u306e\u5236\u5fa1"},{"location":"robot_spiffs/#_1","text":"HTML 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 <!DOCTYPE html> <html> <head> <meta charset= \"UTF-8\" > <meta http-equiv= \"Refresh\" content= \"3\" > <meta name= \"viewport\" content= \"width=device-width,initial-scale=1\" > </head> <body> <center> <input type= \"button\" value= \"\u2191\" onClick= \"location.href='/forward'\" ><br> <input type= \"button\" value= \"\u2190\" onClick= \"location.href='/right'\" > <input type= \"button\" value= \"\u25a1\" onClick= \"location.href='/stop'\" > <input type= \"button\" value= \"\u2192\" onClick= \"location.href='/left'\" ><br> <input type= \"button\" value= \"\u2193\" onClick= \"location.href='/back'\" ><br> </center> </body> </html> Arduino 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 #include \"ESPAsyncWebServer.h\" #include \"FS.h\" #include \"SPIFFS.h\" #include \"FaBoPWM_PCA9685.h\" FaBoPWM faboPWM ; const char ssid [] = \"ESP32AP-AKIRA\" ; const char pass [] = \"11111111\" ; const IPAddress ip ( 192 , 168 , 0 , 1 ); const IPAddress subnet ( 255 , 255 , 255 , 0 ); AsyncWebServer server ( 80 ); int STOP = 0 ; int FORWARD = 400 ; int BACK = 250 ; void setup () { Serial . begin ( 115200 ); if ( faboPWM . begin ()) { Serial . println ( \"Find PCA9685\" ); faboPWM . init ( 300 ); } faboPWM . set_hz ( 50 ); faboPWM . set_channel_value ( 0 , STOP ); faboPWM . set_channel_value ( 1 , STOP ); SPIFFS . begin (); WiFi . softAP ( ssid , pass ); delay ( 100 ); WiFi . softAPConfig ( ip , ip , subnet ); IPAddress serverIP = WiFi . softAPIP (); server . on ( \"/\" , HTTP_GET , []( AsyncWebServerRequest * request ){ request -> send ( SPIFFS , \"/index.html\" , \"text/html\" ); }); server . on ( \"/stop\" , HTTP_GET , []( AsyncWebServerRequest * request ){ request -> send ( SPIFFS , \"/index.html\" , \"text/html\" ); faboPWM . set_channel_value ( 0 , STOP ); faboPWM . set_channel_value ( 1 , STOP ); }); server . on ( \"/forward\" , HTTP_GET , []( AsyncWebServerRequest * request ){ request -> send ( SPIFFS , \"/index.html\" , \"text/html\" ); faboPWM . set_channel_value ( 0 , FORWARD ); faboPWM . set_channel_value ( 1 , BACK ); }); server . on ( \"/back\" , HTTP_GET , []( AsyncWebServerRequest * request ){ request -> send ( SPIFFS , \"/index.html\" , \"text/html\" ); faboPWM . set_channel_value ( 0 , BACK ); faboPWM . set_channel_value ( 1 , FORWARD ); }); server . on ( \"/left\" , HTTP_GET , []( AsyncWebServerRequest * request ){ request -> send ( SPIFFS , \"/index.html\" , \"text/html\" ); faboPWM . set_channel_value ( 0 , FORWARD ); faboPWM . set_channel_value ( 1 , FORWARD ); }); server . on ( \"/right\" , HTTP_GET , []( AsyncWebServerRequest * request ){ request -> send ( SPIFFS , \"/index.html\" , \"text/html\" ); faboPWM . set_channel_value ( 0 , BACK ); faboPWM . set_channel_value ( 1 , BACK ); }); server . begin (); Serial . println (); Serial . print ( \"AccessPoint:\" ); Serial . println ( ssid ); Serial . print ( \"IP:\" ); Serial . println ( serverIP ); } void loop () { }","title":"\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9"},{"location":"servo/","text":"Servo\u306e\u5236\u5fa1 FaBo Denbun\u3067Servo\u3092\u5236\u5fa1\u3057\u307e\u3059\u3002 Servo\u306e\u5236\u5fa1 HTML 1 2 3 4 5 6 7 8 9 10 11 12 13 <!DOCTYPE html> <html> <head> <meta charset= \"UTF-8\" > <meta name= \"viewport\" content= \"width=device-width,initial-scale=1\" > </head> <body> <br> <center> <input type= \"range\" min= \"200\" max= \"500\" step= \"1\" value= \"%VALUE0%\" style= \"width:80%;\" onchange= \"location.href='/?value='+this.value\" > </center> </body> </html> Arduino 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 #include \"ESPAsyncWebServer.h\" #include \"FS.h\" #include \"SPIFFS.h\" #include \"FaBoPWM_PCA9685.h\" FaBoPWM faboPWM ; const char ssid [] = \"ESP32AP-AKIRA\" ; const char pass [] = \"11111111\" ; const IPAddress ip ( 192 , 168 , 0 , 1 ); const IPAddress subnet ( 255 , 255 , 255 , 0 ); AsyncWebServer server ( 80 ); uint16_t value = 300 ; String processor ( const String & var ) { if ( var == \"VALUE0\" ) { return String ( value , DEC ); } return String (); } void setup () { Serial . begin ( 115200 ); if ( faboPWM . begin ()) { Serial . println ( \"Find PCA9685\" ); faboPWM . init ( 300 ); } faboPWM . set_hz ( 50 ); SPIFFS . begin (); WiFi . softAP ( ssid , pass ); delay ( 100 ); WiFi . softAPConfig ( ip , ip , subnet ); IPAddress serverIP = WiFi . softAPIP (); server . on ( \"/\" , HTTP_GET , []( AsyncWebServerRequest * request ){ if ( request -> hasParam ( \"value\" )) { AsyncWebParameter * p = request -> getParam ( \"value\" ); String valueStr = p -> value (). c_str (); value = valueStr . toInt (); faboPWM . set_channel_value ( 0 , value ); } request -> send ( SPIFFS , \"/index.html\" , String (), false , processor ); }); server . begin (); Serial . println (); Serial . print ( \"AccessPoint:\" ); Serial . println ( ssid ); Serial . print ( \"IP:\" ); Serial . println ( serverIP ); } void loop () { }","title":"Servo\u306e\u5236\u5fa1"},{"location":"servo/#servo","text":"FaBo Denbun\u3067Servo\u3092\u5236\u5fa1\u3057\u307e\u3059\u3002","title":"Servo\u306e\u5236\u5fa1"},{"location":"servo/#servo_1","text":"HTML 1 2 3 4 5 6 7 8 9 10 11 12 13 <!DOCTYPE html> <html> <head> <meta charset= \"UTF-8\" > <meta name= \"viewport\" content= \"width=device-width,initial-scale=1\" > </head> <body> <br> <center> <input type= \"range\" min= \"200\" max= \"500\" step= \"1\" value= \"%VALUE0%\" style= \"width:80%;\" onchange= \"location.href='/?value='+this.value\" > </center> </body> </html> Arduino 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 #include \"ESPAsyncWebServer.h\" #include \"FS.h\" #include \"SPIFFS.h\" #include \"FaBoPWM_PCA9685.h\" FaBoPWM faboPWM ; const char ssid [] = \"ESP32AP-AKIRA\" ; const char pass [] = \"11111111\" ; const IPAddress ip ( 192 , 168 , 0 , 1 ); const IPAddress subnet ( 255 , 255 , 255 , 0 ); AsyncWebServer server ( 80 ); uint16_t value = 300 ; String processor ( const String & var ) { if ( var == \"VALUE0\" ) { return String ( value , DEC ); } return String (); } void setup () { Serial . begin ( 115200 ); if ( faboPWM . begin ()) { Serial . println ( \"Find PCA9685\" ); faboPWM . init ( 300 ); } faboPWM . set_hz ( 50 ); SPIFFS . begin (); WiFi . softAP ( ssid , pass ); delay ( 100 ); WiFi . softAPConfig ( ip , ip , subnet ); IPAddress serverIP = WiFi . softAPIP (); server . on ( \"/\" , HTTP_GET , []( AsyncWebServerRequest * request ){ if ( request -> hasParam ( \"value\" )) { AsyncWebParameter * p = request -> getParam ( \"value\" ); String valueStr = p -> value (). c_str (); value = valueStr . toInt (); faboPWM . set_channel_value ( 0 , value ); } request -> send ( SPIFFS , \"/index.html\" , String (), false , processor ); }); server . begin (); Serial . println (); Serial . print ( \"AccessPoint:\" ); Serial . println ( ssid ); Serial . print ( \"IP:\" ); Serial . println ( serverIP ); } void loop () { }","title":"Servo\u306e\u5236\u5fa1"},{"location":"temperature/","text":"207 Temerature \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u53d6\u308a\u8fbc\u307f Temerature index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 <!DOCTYPE html> <html> <head> <meta charset= \"UTF-8\" > <meta http-equiv= \"Refresh\" content= \"3\" > <meta name= \"viewport\" content= \"width=device-width,initial-scale=1\" > <link rel= \"stylesheet\" type= \"text/css\" href= \"/denbun.css\" > </head> <body> <div class= \"temperature\" > \u6e29\u5ea6: %TEMP% \u5ea6 <br> </div> </body> </html> denbun.css 1 2 3 4 5 6 7 8 9 10 11 body { background: linear-gradient(#00FFFF, #80FF00) fixed; } .temperature { text-align: center; margin: 120px 0; font-size: 35px; color: #FFFFFF; } Arduino 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 #include \"WiFi.h\" #include \"ESPAsyncWebServer.h\" #include \"FS.h\" #include \"SPIFFS.h\" #include <FaBoTemperature_ADT7410.h> FaBoTemperature faboTemperature ; const char ssid [] = \"ESP32AP-AKIRA\" ; const char pass [] = \"11111111\" ; const IPAddress ip ( 192 , 168 , 0 , 1 ); const IPAddress subnet ( 255 , 255 , 255 , 0 ); AsyncWebServer server ( 80 ); double temp = 0 ; String processor ( const String & var ) { if ( var == \"TEMP\" ) { String tempStr = String ( temp , DEC ); tempStr = tempStr . substring ( 0 , 4 ); return tempStr ; } return String (); } void setup () { Serial . begin ( 115200 ); faboTemperature . begin (); SPIFFS . begin (); WiFi . softAP ( ssid , pass ); delay ( 100 ); WiFi . softAPConfig ( ip , ip , subnet ); IPAddress serverIP = WiFi . softAPIP (); server . on ( \"/\" , HTTP_GET , []( AsyncWebServerRequest * request ){ temp = faboTemperature . readTemperature (); request -> send ( SPIFFS , \"/index.html\" , String (), false , processor ); }); server . on ( \"/denbun.css\" , HTTP_GET , []( AsyncWebServerRequest * request ){ request -> send ( SPIFFS , \"/denbun.css\" , \"text/css\" ); }); server . begin (); Serial . println (); Serial . print ( \"AccessPoint:\" ); Serial . println ( ssid ); Serial . print ( \"IP:\" ); Serial . println ( serverIP ); } void loop () {}","title":"207 Temerature"},{"location":"temperature/#207-temerature","text":"","title":"207 Temerature"},{"location":"temperature/#_1","text":"","title":"\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u53d6\u308a\u8fbc\u307f"},{"location":"temperature/#temerature","text":"index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 <!DOCTYPE html> <html> <head> <meta charset= \"UTF-8\" > <meta http-equiv= \"Refresh\" content= \"3\" > <meta name= \"viewport\" content= \"width=device-width,initial-scale=1\" > <link rel= \"stylesheet\" type= \"text/css\" href= \"/denbun.css\" > </head> <body> <div class= \"temperature\" > \u6e29\u5ea6: %TEMP% \u5ea6 <br> </div> </body> </html> denbun.css 1 2 3 4 5 6 7 8 9 10 11 body { background: linear-gradient(#00FFFF, #80FF00) fixed; } .temperature { text-align: center; margin: 120px 0; font-size: 35px; color: #FFFFFF; } Arduino 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 #include \"WiFi.h\" #include \"ESPAsyncWebServer.h\" #include \"FS.h\" #include \"SPIFFS.h\" #include <FaBoTemperature_ADT7410.h> FaBoTemperature faboTemperature ; const char ssid [] = \"ESP32AP-AKIRA\" ; const char pass [] = \"11111111\" ; const IPAddress ip ( 192 , 168 , 0 , 1 ); const IPAddress subnet ( 255 , 255 , 255 , 0 ); AsyncWebServer server ( 80 ); double temp = 0 ; String processor ( const String & var ) { if ( var == \"TEMP\" ) { String tempStr = String ( temp , DEC ); tempStr = tempStr . substring ( 0 , 4 ); return tempStr ; } return String (); } void setup () { Serial . begin ( 115200 ); faboTemperature . begin (); SPIFFS . begin (); WiFi . softAP ( ssid , pass ); delay ( 100 ); WiFi . softAPConfig ( ip , ip , subnet ); IPAddress serverIP = WiFi . softAPIP (); server . on ( \"/\" , HTTP_GET , []( AsyncWebServerRequest * request ){ temp = faboTemperature . readTemperature (); request -> send ( SPIFFS , \"/index.html\" , String (), false , processor ); }); server . on ( \"/denbun.css\" , HTTP_GET , []( AsyncWebServerRequest * request ){ request -> send ( SPIFFS , \"/denbun.css\" , \"text/css\" ); }); server . begin (); Serial . println (); Serial . print ( \"AccessPoint:\" ); Serial . println ( ssid ); Serial . print ( \"IP:\" ); Serial . println ( serverIP ); } void loop () {}","title":"Temerature"},{"location":"template/","text":"Template Template index.html 1 2 3 4 5 6 7 8 9 10 <!DOCTYPE html> <html> <head> <meta charset= \"UTF-8\" > <meta name= \"viewport\" content= \"width=device-width,initial-scale=1\" > <script type= \"text/javascript\" src= \"denbun.js\" ></script> </head> %WORD% </body> </html> Arduino 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 #include <WiFi.h> #include \"ESPAsyncWebServer.h\" #include \"FS.h\" #include \"SPIFFS.h\" const char ssid [] = \"ESP32AP-AKIRA\" ; const char pass [] = \"11111111\" ; const IPAddress ip ( 192 , 168 , 0 , 1 ); const IPAddress subnet ( 255 , 255 , 255 , 0 ); AsyncWebServer server ( 80 ); String processor ( const String & var ) { if ( var == \"WORD\" ) return F ( \"WebxIoT Hack-a-thon\" ); return String (); } void setup () { Serial . begin ( 115200 ); SPIFFS . begin (); WiFi . softAP ( ssid , pass ); delay ( 100 ); WiFi . softAPConfig ( ip , ip , subnet ); IPAddress serverIP = WiFi . softAPIP (); server . on ( \"/\" , HTTP_GET , []( AsyncWebServerRequest * request ){ request -> send ( SPIFFS , \"/index.html\" , String (), false , processor ); }); server . on ( \"/denbun.js\" , HTTP_GET , []( AsyncWebServerRequest * request ){ request -> send ( SPIFFS , \"/denbun.js\" , \"application/javascript\" ); }); server . begin (); Serial . println (); Serial . print ( \"AccessPoint:\" ); Serial . println ( ssid ); Serial . print ( \"IP:\" ); Serial . println ( serverIP ); } void loop () {}","title":"Template"},{"location":"template/#template","text":"","title":"Template"},{"location":"template/#template_1","text":"index.html 1 2 3 4 5 6 7 8 9 10 <!DOCTYPE html> <html> <head> <meta charset= \"UTF-8\" > <meta name= \"viewport\" content= \"width=device-width,initial-scale=1\" > <script type= \"text/javascript\" src= \"denbun.js\" ></script> </head> %WORD% </body> </html> Arduino 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 #include <WiFi.h> #include \"ESPAsyncWebServer.h\" #include \"FS.h\" #include \"SPIFFS.h\" const char ssid [] = \"ESP32AP-AKIRA\" ; const char pass [] = \"11111111\" ; const IPAddress ip ( 192 , 168 , 0 , 1 ); const IPAddress subnet ( 255 , 255 , 255 , 0 ); AsyncWebServer server ( 80 ); String processor ( const String & var ) { if ( var == \"WORD\" ) return F ( \"WebxIoT Hack-a-thon\" ); return String (); } void setup () { Serial . begin ( 115200 ); SPIFFS . begin (); WiFi . softAP ( ssid , pass ); delay ( 100 ); WiFi . softAPConfig ( ip , ip , subnet ); IPAddress serverIP = WiFi . softAPIP (); server . on ( \"/\" , HTTP_GET , []( AsyncWebServerRequest * request ){ request -> send ( SPIFFS , \"/index.html\" , String (), false , processor ); }); server . on ( \"/denbun.js\" , HTTP_GET , []( AsyncWebServerRequest * request ){ request -> send ( SPIFFS , \"/denbun.js\" , \"application/javascript\" ); }); server . begin (); Serial . println (); Serial . print ( \"AccessPoint:\" ); Serial . println ( ssid ); Serial . print ( \"IP:\" ); Serial . println ( serverIP ); } void loop () {}","title":"Template"},{"location":"uv/","text":"206 UV Index 206\u3092I2C\u306e\u7aef\u5b50\u306b\u3064\u306a\u304e\u307e\u3059\u3002 \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 index.html 1 2 3 4 5 6 7 8 9 10 11 12 <!DOCTYPE html> <html> <head> <meta charset= \"UTF-8\" > <meta name= \"viewport\" content= \"width=device-width,initial-scale=1\" > </head> <body> UV INDEX: %UVINDEX% <br> IR: %IR% <br> VISIBLE: %VISIBLE% <br> </body> </html> Arduino 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 #include \"WiFi.h\" #include \"ESPAsyncWebServer.h\" #include \"FS.h\" #include \"SPIFFS.h\" #include \"FaBoUV_Si1132.h\" FaBoUV faboUV ; const char ssid [] = \"ESP32AP-AKIRA\" ; const char pass [] = \"11111111\" ; const IPAddress ip ( 192 , 168 , 0 , 1 ); const IPAddress subnet ( 255 , 255 , 255 , 0 ); AsyncWebServer server ( 80 ); double uvindex = 0 ; double ir = 0 ; double visible = 0 ; String processor ( const String & var ) { if ( var == \"UVINDEX\" ) { return String ( uvindex , DEC ); } if ( var == \"IR\" ) { return String ( ir , DEC ); } if ( var == \"VISIBLE\" ) { return String ( visible , DEC ); } return String (); } void setup () { Serial . begin ( 115200 ); while ( ! faboUV . begin ()){ Serial . println ( \"Si1132 Not Found\" ); delay ( 5000 ); } SPIFFS . begin (); WiFi . softAP ( ssid , pass ); delay ( 100 ); WiFi . softAPConfig ( ip , ip , subnet ); IPAddress serverIP = WiFi . softAPIP (); server . on ( \"/\" , HTTP_GET , []( AsyncWebServerRequest * request ){ request -> send ( SPIFFS , \"/index.html\" , String (), false , processor ); }); server . begin (); Serial . println (); Serial . print ( \"AccessPoint:\" ); Serial . println ( ssid ); Serial . print ( \"IP:\" ); Serial . println ( serverIP ); } void loop () { uvindex = faboUV . readUV () / 100 ; ir = faboUV . readIR (); visible = faboUV . readVisible (); Serial . print ( \"UV:\" ); Serial . println ( uvindex ); Serial . print ( \"IR:\" ); Serial . println ( ir ); Serial . print ( \"Visible:\" ); Serial . println ( visible ); Serial . println ( \"\" ); delay ( 1000 ); } \u6539\u9020 1 2 3 4 5 6 7 8 9 10 11 12 13 <!DOCTYPE html> <html> <head> <meta charset= \"UTF-8\" > <meta http-equiv= \"Refresh\" content= \"3\" > <meta name= \"viewport\" content= \"width=device-width,initial-scale=1\" > </head> <body> UV INDEX: %UVINDEX% <br> IR: %IR% <br> VISIBLE: %VISIBLE% <br> </body> </html>","title":"206 UV Index"},{"location":"uv/#206-uv-index","text":"206\u3092I2C\u306e\u7aef\u5b50\u306b\u3064\u306a\u304e\u307e\u3059\u3002","title":"206 UV Index"},{"location":"uv/#_1","text":"index.html 1 2 3 4 5 6 7 8 9 10 11 12 <!DOCTYPE html> <html> <head> <meta charset= \"UTF-8\" > <meta name= \"viewport\" content= \"width=device-width,initial-scale=1\" > </head> <body> UV INDEX: %UVINDEX% <br> IR: %IR% <br> VISIBLE: %VISIBLE% <br> </body> </html> Arduino 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 #include \"WiFi.h\" #include \"ESPAsyncWebServer.h\" #include \"FS.h\" #include \"SPIFFS.h\" #include \"FaBoUV_Si1132.h\" FaBoUV faboUV ; const char ssid [] = \"ESP32AP-AKIRA\" ; const char pass [] = \"11111111\" ; const IPAddress ip ( 192 , 168 , 0 , 1 ); const IPAddress subnet ( 255 , 255 , 255 , 0 ); AsyncWebServer server ( 80 ); double uvindex = 0 ; double ir = 0 ; double visible = 0 ; String processor ( const String & var ) { if ( var == \"UVINDEX\" ) { return String ( uvindex , DEC ); } if ( var == \"IR\" ) { return String ( ir , DEC ); } if ( var == \"VISIBLE\" ) { return String ( visible , DEC ); } return String (); } void setup () { Serial . begin ( 115200 ); while ( ! faboUV . begin ()){ Serial . println ( \"Si1132 Not Found\" ); delay ( 5000 ); } SPIFFS . begin (); WiFi . softAP ( ssid , pass ); delay ( 100 ); WiFi . softAPConfig ( ip , ip , subnet ); IPAddress serverIP = WiFi . softAPIP (); server . on ( \"/\" , HTTP_GET , []( AsyncWebServerRequest * request ){ request -> send ( SPIFFS , \"/index.html\" , String (), false , processor ); }); server . begin (); Serial . println (); Serial . print ( \"AccessPoint:\" ); Serial . println ( ssid ); Serial . print ( \"IP:\" ); Serial . println ( serverIP ); } void loop () { uvindex = faboUV . readUV () / 100 ; ir = faboUV . readIR (); visible = faboUV . readVisible (); Serial . print ( \"UV:\" ); Serial . println ( uvindex ); Serial . print ( \"IR:\" ); Serial . println ( ir ); Serial . print ( \"Visible:\" ); Serial . println ( visible ); Serial . println ( \"\" ); delay ( 1000 ); }","title":"\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9"},{"location":"uv/#_2","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 <!DOCTYPE html> <html> <head> <meta charset= \"UTF-8\" > <meta http-equiv= \"Refresh\" content= \"3\" > <meta name= \"viewport\" content= \"width=device-width,initial-scale=1\" > </head> <body> UV INDEX: %UVINDEX% <br> IR: %IR% <br> VISIBLE: %VISIBLE% <br> </body> </html>","title":"\u6539\u9020"},{"location":"websocket/","text":"WebSocket \u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u6027\u304c\u5fc5\u8981\u306a\u30c7\u30fc\u30bf\u8ee2\u9001\u306f\u3001Denbun\u3092WebSocket\u5316\u3057\u3066\u304a\u3053\u306a\u3044\u307e\u3059\u3002 WebSocket index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 <!DOCTYPE html> <html> <head> <meta charset= \"UTF-8\" > <meta name= \"viewport\" content= \"width=device-width,initial-scale=1\" > <script type= \"text/javascript\" src= \"denbun.js\" ></script> </head> <body> <br> <center> <input type= \"button\" value= \"Connect\" onclick= \"connect();\" /><br /> <input type= \"button\" value= \"Send\" onclick= \"send('TEST');\" /><br /> </center> </body> </html> denbun.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 var webSocket = null ; function connect () { if ( webSocket == null ) { webSocket = new WebSocket ( \"ws://192.168.0.1/denbun\" ); webSocket . onopen = onOpen ; webSocket . onmessage = onMessage ; webSocket . onclose = onClose ; webSocket . onerror = onError ; } } function send ( msg ) { if ( webSocket != null ) { webSocket . send ( \"\" + msg ); } } function onOpen ( event ) { alert ( \"Connect\" ); } function onMessage ( event ) { if ( event && event . data ) { alert ( event . data ); } } function onClose ( event ) { webSocket = null ; } function onError ( event ) {} Arduino 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 #include \"ESPAsyncWebServer.h\" #include \"FS.h\" #include \"SPIFFS.h\" #include \"FaBoPWM_PCA9685.h\" FaBoPWM faboPWM ; const char ssid [] = \"ESP32AP-AKIRA\" ; const char pass [] = \"11111111\" ; const IPAddress ip ( 192 , 168 , 0 , 1 ); const IPAddress subnet ( 255 , 255 , 255 , 0 ); AsyncWebServer server ( 80 ); AsyncWebSocket ws ( \"/denbun\" ); void onEvent ( AsyncWebSocket * server , AsyncWebSocketClient * client , AwsEventType type , void * arg , uint8_t * data , size_t len ){ if ( type == WS_EVT_CONNECT ){ Serial . printf ( \"ws(url=%s,id=%u) connect \\n \" , server -> url (), client -> id ()); } else if ( type == WS_EVT_DISCONNECT ){ Serial . println ( \"Client disconnected.\" ); } else if ( type == WS_EVT_DATA ){ String msg = \"\" ; uint16_t id = client -> id (); AwsFrameInfo * info = ( AwsFrameInfo * ) arg ; if ( info -> opcode == WS_TEXT ){ for ( size_t i = 0 ; i < info -> len ; i ++ ) { msg += ( char ) data [ i ]; } } Serial . println ( id ); Serial . println ( msg ); ws . text ( id , \"esp32 reply:\" + msg ); } } void setup () { Serial . begin ( 115200 ); SPIFFS . begin (); WiFi . softAP ( ssid , pass ); delay ( 100 ); WiFi . softAPConfig ( ip , ip , subnet ); IPAddress serverIP = WiFi . softAPIP (); ws . onEvent ( onEvent ); server . addHandler ( & ws ); server . on ( \"/\" , HTTP_GET , []( AsyncWebServerRequest * request ){ request -> send ( SPIFFS , \"/index.html\" , \"text/html\" ); }); server . on ( \"/denbun.js\" , HTTP_GET , []( AsyncWebServerRequest * request ){ request -> send ( SPIFFS , \"/denbun.js\" , \"application/javascript\" ); }); server . begin (); Serial . println (); Serial . print ( \"AccessPoint:\" ); Serial . println ( ssid ); Serial . print ( \"IP:\" ); Serial . println ( serverIP ); } void loop () { } \u5b9f\u884c\u7d50\u679c","title":"WebSocket"},{"location":"websocket/#websocket","text":"\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u6027\u304c\u5fc5\u8981\u306a\u30c7\u30fc\u30bf\u8ee2\u9001\u306f\u3001Denbun\u3092WebSocket\u5316\u3057\u3066\u304a\u3053\u306a\u3044\u307e\u3059\u3002","title":"WebSocket"},{"location":"websocket/#websocket_1","text":"index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 <!DOCTYPE html> <html> <head> <meta charset= \"UTF-8\" > <meta name= \"viewport\" content= \"width=device-width,initial-scale=1\" > <script type= \"text/javascript\" src= \"denbun.js\" ></script> </head> <body> <br> <center> <input type= \"button\" value= \"Connect\" onclick= \"connect();\" /><br /> <input type= \"button\" value= \"Send\" onclick= \"send('TEST');\" /><br /> </center> </body> </html> denbun.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 var webSocket = null ; function connect () { if ( webSocket == null ) { webSocket = new WebSocket ( \"ws://192.168.0.1/denbun\" ); webSocket . onopen = onOpen ; webSocket . onmessage = onMessage ; webSocket . onclose = onClose ; webSocket . onerror = onError ; } } function send ( msg ) { if ( webSocket != null ) { webSocket . send ( \"\" + msg ); } } function onOpen ( event ) { alert ( \"Connect\" ); } function onMessage ( event ) { if ( event && event . data ) { alert ( event . data ); } } function onClose ( event ) { webSocket = null ; } function onError ( event ) {} Arduino 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 #include \"ESPAsyncWebServer.h\" #include \"FS.h\" #include \"SPIFFS.h\" #include \"FaBoPWM_PCA9685.h\" FaBoPWM faboPWM ; const char ssid [] = \"ESP32AP-AKIRA\" ; const char pass [] = \"11111111\" ; const IPAddress ip ( 192 , 168 , 0 , 1 ); const IPAddress subnet ( 255 , 255 , 255 , 0 ); AsyncWebServer server ( 80 ); AsyncWebSocket ws ( \"/denbun\" ); void onEvent ( AsyncWebSocket * server , AsyncWebSocketClient * client , AwsEventType type , void * arg , uint8_t * data , size_t len ){ if ( type == WS_EVT_CONNECT ){ Serial . printf ( \"ws(url=%s,id=%u) connect \\n \" , server -> url (), client -> id ()); } else if ( type == WS_EVT_DISCONNECT ){ Serial . println ( \"Client disconnected.\" ); } else if ( type == WS_EVT_DATA ){ String msg = \"\" ; uint16_t id = client -> id (); AwsFrameInfo * info = ( AwsFrameInfo * ) arg ; if ( info -> opcode == WS_TEXT ){ for ( size_t i = 0 ; i < info -> len ; i ++ ) { msg += ( char ) data [ i ]; } } Serial . println ( id ); Serial . println ( msg ); ws . text ( id , \"esp32 reply:\" + msg ); } } void setup () { Serial . begin ( 115200 ); SPIFFS . begin (); WiFi . softAP ( ssid , pass ); delay ( 100 ); WiFi . softAPConfig ( ip , ip , subnet ); IPAddress serverIP = WiFi . softAPIP (); ws . onEvent ( onEvent ); server . addHandler ( & ws ); server . on ( \"/\" , HTTP_GET , []( AsyncWebServerRequest * request ){ request -> send ( SPIFFS , \"/index.html\" , \"text/html\" ); }); server . on ( \"/denbun.js\" , HTTP_GET , []( AsyncWebServerRequest * request ){ request -> send ( SPIFFS , \"/denbun.js\" , \"application/javascript\" ); }); server . begin (); Serial . println (); Serial . print ( \"AccessPoint:\" ); Serial . println ( ssid ); Serial . print ( \"IP:\" ); Serial . println ( serverIP ); } void loop () { }","title":"WebSocket"},{"location":"websocket/#_1","text":"","title":"\u5b9f\u884c\u7d50\u679c"}]}